generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id           Int       @id @default(autoincrement())
  name         String
  icon         String    @default("/defaults/headset-category.png")
  previewImage String?   @default("/defaults/category-preview/accessories.png")
  keywords     String?   @default("")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  Products     Product[]
}

model Product {
  id             Int              @id @default(autoincrement())
  name           String           @db.LongText
  price          Int
  offerPrice     Int?
  editor         String?          @db.LongText
  brand          String?          @default("")
  color          String?          @default("")
  keywords       String?          @default("")
  description    String?          @default("") @db.LongText
  qty            Int?             @default(1)
  image          String?          @default("")
  categoryId     Int
  category       Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productImages  ProductImages[]
  productDetails ProductDetails[]
  items          OrderItems[]
  offers         Offers[]
}

model ProductImages {
  id        Int      @id @default(autoincrement())
  location  String
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model ProductDetails {
  id        Int     @id @default(autoincrement())
  text      String
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model User {
  id        Int           @id @default(autoincrement())
  name      String
  email     String
  phone     String
  password  String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())
  addresses UserAddress[]
  orders    Order[]
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  username  String   @unique
  email     String
  phone     String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model UserAddress {
  id        Int      @id @default(autoincrement())
  address   String
  city      String
  phone     String
  homePhone String?
  floor     String?
  main      Boolean  @default(false)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Coupon {
  id        Int      @id @default(autoincrement())
  coupon    String
  discount  Int      @default(0)
  usages    Int      @default(5)
  allowed   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  orders    Order[]
}

model Order {
  id            Int          @id @default(autoincrement())
  userId        Int
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  couponId      Int
  coupon        Coupon       @relation(fields: [couponId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  discountValue Int
  overall       Int
  status        String       @default("Ordered")
  statusNumber  Int          @default(0)
  items         OrderItems[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  arriveIn      DateTime?
}

model OrderItems {
  id         Int     @id @default(autoincrement())
  productId  Int
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId    Int
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitPrice  Int
  quantity   Int     @default(1)
  totalPrice Int
  color      String
}

model Offers {
  id          Int      @id @default(autoincrement())
  productId   Int
  product     Product  @relation(fields: [productId], references: [id])
  endsIn      DateTime @default(now())
  offerPrice  Int
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}
